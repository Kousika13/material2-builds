{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {PortalModule} from '@angular/cdk/portal';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n"],"names":["styles","host","class","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","MatCalendar","ctorParameters","type","MatDatepickerIntl","propDecorators","headerComponent","Input","startAt","minDate","maxDate","dateFilter","selectedChange","Output","yearSelected","monthSelected","_userSelection","monthView","ViewChild","args","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","inject","Overlay","scrollStrategies","reposition","MatDatepickerContentBase","_elementRef","this","_MatDatepickerContentMixinBase","mixinColor","MatDatepickerContent","elementRef","_changeDetectorRef","_ngZone","_this","_super","call","tslib_1.__extends","prototype","ngOnInit","datepicker","_popupRef","_positionChange","positionStrategy","getConfig","positionChanges","subscribe","change","isAbove","connectionPair","overlayY","_isAbove","run","markForCheck","ngAfterContentInit","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","nativeElement","querySelector","focus","ngOnDestroy","unsubscribe","Component","selector","template","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","animations","inputs","NgZone","_overlay","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","complete","dispose","_popupComponentRef","_selected","date","sameDate","oldValue","_selectedChanged","_datepickerInput","Error","input","_valueChange","value","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","emit","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","viewContainerRef","panelClass","afterClosed","componentInstance","_setColor","_createPopup","attach","instance","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withFlexibleHeight","withFlexibleWidth","withViewportMargin","withPositions","originX","originY","overlayX","color","decorators","MatDialog","undefined","Inject","DateAdapter","Optional","Directionality","DOCUMENT","calendarHeaderComponent","disabled","opened","MAT_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","element","blur","selected","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","_getThemePalette","obj","isDateInstance","Directive","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","ContentChild","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","MatCalendarBody","declarations","MatCalendarHeader","entryComponents","MatDatepickerModule","__extends","d","b","__","constructor","extendStatics","provider","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","isRtl","_isRtl","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","d1","d2","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","changeDetectorRef","_destroyed","stateChanges","takeUntil","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","preserveWhitespaces","ChangeDetectorRef","_intlChanges","startView","firstChange","view"],"mappings":"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"}