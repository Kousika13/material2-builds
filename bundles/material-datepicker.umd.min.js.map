{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /** @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._isYearEnabled(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _isYearEnabled(year: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n"],"names":["this","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","prototype","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_selected","date","sameDate","oldValue","selectedChanged","emit","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_createPopup","attach","instance","_ngZone","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","scrollStrategy","_overlay","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withFallbackPosition","originX","originY","overlayX","overlayY","decorators","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","ctorParameters","type","MatDialog","undefined","Inject","args","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","Optional","Directionality","DOCUMENT","propDecorators","startAt","Input","startView","Output","yearSelected","monthSelected","opened","MAT_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_elementRef","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","ngAfterContentInit","selected","ngOnDestroy","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","obj","isDateInstance","Directive","selector","providers","MAT_INPUT_VALUE_ACCESSOR","host","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","Component","template","styles","class","[class.mat-datepicker-toggle-active]","_customIcon","ContentChild","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","exports","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","declarations","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","entryComponents","provider","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","selectedChange","_userSelection","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","dateFilter","dateA11yLabel","getDate","d1","d2","ChangeDetectorRef","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_isYearEnabled","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","changeDetectorRef","_dateFilterForViews","minDate","maxDate","_intlChanges","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","_focusActiveCell","change","firstChange","view","monthView","yearView","multiYearView","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","runOutsideAngular","querySelector","date1","date2","isRtl","_isRtl","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","yearsPerPage","NgZone","ViewChild","datepickerUid","InjectionToken","deps","Overlay","useFactory","_calendar","[class.mat-datepicker-content-touch]"],"mappings":";;;;;;;6pDISA,SAAAM,GAA2C4P,GACzC,MAAOnO,OACH,wCAAwCmO,EAD9C,0JJgDA,QAAAC,GAAgEC,GAE9D,MAAO,YAAM,MAAAA,GAAQC,iBAAiBC,4CKzCxCtQ,KAAA+N,QAAoC,GAAIwC,GAAAA,QAGxCvQ,KAAAwQ,cAA0B,WAG1BxQ,KAAAyQ,kBAA8B,gBAG9BzQ,KAAA0Q,eAA2B,iBAG3B1Q,KAAA2Q,eAA2B,aAG3B3Q,KAAA4Q,cAA0B,gBAG1B5Q,KAAA6Q,cAA0B,YAG1B7Q,KAAA8Q,mBAA+B,oBAG/B9Q,KAAA+Q,mBAA+B,gBAG/B/Q,KAAAgR,uBAAmC,cAGnChR,KAAAiR,2BAAuC,wBAjDvC,sBAaAjL,KAACkL,EAAAA,mDAbDnB,KCsBAoB,EAAA,WACE,QAAFA,GAAqBhP,EACAiP,EACAC,EACAC,GAHAtR,KAArBmC,MAAqBA,EACAnC,KAArBoR,aAAqBA,EACApR,KAArBqR,UAAqBA,EACArR,KAArBsR,QAAqBA,EA1BrB,MAAAH,gCAkEAnR,KAAAuR,QAAqB,EAGrBvR,KAAAwR,wBAAoC,EAGpCxR,KAAAyR,WAAwB,EAMxBzR,KAAA0R,gBAA6B,EAG7B1R,KAAA2R,oBAAiE,GAAIzJ,GAAAA,aAArE,MAEEuH,GAAF/O,UAAAkR,aAAE,SAAaC,IACN7R,KAAKwR,wBAA2BK,EAAKP,UAG1CtR,KAAK2R,oBAAoB9P,KAAKgQ,EAAK1P,QAIrC5B,OAAFC,eAAMiP,EAAN/O,UAAA,uBAAE,WACE,MAAOV,MAAK8R,MAAQ9R,KAAK8R,KAAKC,QAAU/R,KAAK8R,KAAK,GAAGC,OACjD/R,KAAKuR,QAAUvR,KAAK8R,KAAK,GAAGC,OAAS,mCAG3CtC,EAAF/O,UAAAsR,cAAE,SAAcC,EAAkBC,GAC9B,GAAIC,GAAaF,EAAWjS,KAAKuR,QAAUW,CAO3C,OAJID,KACFE,GAAcnS,KAAKoS,iBAGdD,GAAcnS,KAAKyR,2BAtE9BzL,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,sBACEiC,SAAU,q1CACVC,QAAF,wkBACE/B,MACFgC,MAAA,oBACM0D,KAAN,OACIC,qBAAJ,QAEA/M,SAAA,kBACAI,cAAAC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,gHAMA6M,aAAAvM,KAAQY,EAAAA,QAGR4L,gBAAAxM,KAAAY,EAAAA,QAGA6L,wBAAQzM,KAARY,EAAAA,QAGA2K,UAAAvL,KAAAY,EAAAA,QAGA4K,yBAAAxL,KAAAY,EAAAA,QAGA6K,aAAAzL,KAAAY,EAAAA,QAGA8K,kBAAA1L,KAAAY,EAAAA,QAGA+K,sBAAA3L,KAAAc,EAAAA,UASA2I,kBCeE,QAAFE,GAAiCxP,EAC2B4H,EACtC6F,GAClB,GAH6B5N,KAAjCG,aAAiCA,EAC2BH,KAA5D+H,aAA4DA,EACtC/H,KAAtB4N,mBAAsBA,EA5BtB5N,KAAA0S,eAA8D,GAAIxK,GAAAA,aAGlElI,KAAA2S,eAA0D,GAAIzK,GAAAA,cA0BrDlI,KAAKG,aACR,KAAMG,GAA2B,cAEnC,KAAKN,KAAK+H,aACR,KAAMzH,GAA2B,mBAGnC,IAAMsS,GAAiB5S,KAAKG,aAAa0S,oBACnCC,EAAiB9S,KAAKG,aAAa4S,kBAAkB,UACrDC,EAAehT,KAAKG,aAAa4S,kBAAkB,QAGrDE,EAAWD,EAAaE,IAAI,SAACC,EAAMC,GACrC,OAAQD,KAAdA,EAAoBE,OAAQP,EAAeM,KAEvCpT,MAAKsT,UAAYL,EAASM,MAAMX,GAAgBY,OAAOP,EAASM,MAAM,EAAGX,IAEzE5S,KAAKyT,YAAczT,KAAKG,aAAauT,QA3CzC,MA3BAnT,QAAAC,eAAMmP,EAANjP,UAAA,kBAAA,WAAwB,MAAOV,MAAKyT,iBAClC,SAAetR,GACb,GAAIwR,GAAgB3T,KAAKyT,WACzBzT,MAAKyT,YACDzT,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,KAAWnC,KAAKG,aAAauT,QACnF1T,KAAK4T,qBAAqBD,EAAe3T,KAAKyT,cACjDzT,KAAK6T,yCAOXtT,OAAAC,eAAMmP,EAANjP,UAAA,gBAAA,WAA6B,MAAOV,MAAKwB,eACvC,SAAaW,GACXnC,KAAKwB,UAAYxB,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,IACxEnC,KAAK8T,cAAgB9T,KAAK+T,uBAAuB/T,KAAKwB,4CAyDxDmO,EAAFjP,UAAAoK,mBAAE,WACE9K,KAAK6T,SAIPlE,EAAFjP,UAAAsT,cAAE,SAAcvS,GACZ,GAAIzB,KAAK8T,eAAiBrS,EAAM,CAC9B,GAAMwS,GAAejU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAC9CC,EAAgBpU,KAAKG,aAAakU,SAASrU,KAAKmU,YAChDG,EAAetU,KAAKG,aAAaoU,WAAWN,EAAcG,EAAe3S,EAE/EzB,MAAK0S,eAAe7Q,KAAKyS,GAG3BtU,KAAK2S,eAAe9Q,QAItB8N,EAAFjP,UAAAmT,MAAE,WACE7T,KAAK8T,cAAgB9T,KAAK+T,uBAAuB/T,KAAK+K,UACtD/K,KAAKwU,WAAaxU,KAAK+T,uBAAuB/T,KAAKG,aAAauT,SAChE1T,KAAKyU,YACDzU,KAAKG,aAAauU,cAAc,SAAS1U,KAAKG,aAAakU,SAASrU,KAAKmU,aACpEQ,mBAET,IAAIC,GAAe5U,KAAKG,aAAaoU,WAAWvU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAC3EnU,KAAKG,aAAakU,SAASrU,KAAKmU,YAAa,EACjDnU,MAAK6U,kBAzHa,EA0HG7U,KAAKG,aAAa2U,aAAaF,GAC/C5U,KAAKG,aAAa0S,qBA3HL,EA6HlB7S,KAAK+U,mBACL/U,KAAK4N,mBAAmBW,gBAIlBoB,EAAVjP,UAAAqU,4BACI,GAAIC,GAAchV,KAAKG,aAAa8U,kBAAkBjV,KAAKmU,YACvDe,EAAYlV,KAAKG,aAAagV,cAClCnV,MAAKoV,WACL,KAAK,GAAIhC,GAAI,EAAGvB,EAAO7R,KAAK6U,iBAAkBzB,EAAI4B,EAAa5B,IAAKvB,IAAQ,CAtI1D,GAuIZA,IACF7R,KAAKoV,OAAOC,SACZxD,EAAO,EAET,IAAIpQ,GAAOzB,KAAKG,aAAaoU,WACzBvU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAC/BnU,KAAKG,aAAakU,SAASrU,KAAKmU,YAAaf,EAAI,GACjD9B,GAAWtR,KAAKsV,YAChBtV,KAAKsV,WAAW7T,GAChB4P,EAAYrR,KAAKG,aAAasK,OAAOhJ,EAAMzB,KAAK+H,aAAa2C,QAAQ6K,cACzEvV,MAAKoV,OAAOpV,KAAKoV,OAAOrD,OAAS,GAC5BsD,KAAK,GAAIlE,GAAgBiC,EAAI,EAAG8B,EAAU9B,GAAI/B,EAAWC,MAQ1D3B,EAAVjP,UAAAqT,uBAAA,SAAiCtS,GAC7B,MAAOA,IAAQzB,KAAK4T,qBAAqBnS,EAAMzB,KAAKmU,YAChDnU,KAAKG,aAAaqV,QAAQ/T,GAAQ,MAIhCkO,EAAVjP,UAAAkT,qBAAA,SAA+B6B,EAAcC,GACzC,SAAUD,IAAMC,GAAM1V,KAAKG,aAAakU,SAASoB,IAAOzV,KAAKG,aAAakU,SAASqB,IACzE1V,KAAKG,aAAa+T,QAAQuB,IAAOzV,KAAKG,aAAa+T,QAAQwB,KAO/D/F,EAAVjP,UAAAyI,oBAAA,SAA8BkD,GAC1B,MAAQrM,MAAKG,aAAamM,eAAeD,IAAQrM,KAAKG,aAAaoK,QAAQ8B,GAAQA,EAAM,qBAnK7FrG,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,iBACEiC,SAAU,mhBACVlJ,SAAU,eACVI,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,0LAjBAM,KAAQ2P,EAAAA,qBAFRhG,EAAAjJ,sEA2BA4O,aAAAtP,KAAGY,EAAAA,QAaH8L,iBAAG1M,KAAHc,EAAAA,SASA6L,iBAAA3M,KAAAc,EAAAA,UAMA6I,kBCWE,QAAFE,GAAiC1P,EACXyN,GAClB,GAF6B5N,KAAjCG,aAAiCA,EACXH,KAAtB4N,mBAAsBA,EAftB5N,KAAA0S,eAAuD,GAAIxK,GAAAA,aAG3DlI,KAAA+G,aAAqD,GAAImB,GAAAA,cAahDlI,KAAKG,aACR,KAAMG,GAA2B,cAGnCN,MAAKyT,YAAczT,KAAKG,aAAauT,QAjBzC,MA5BAnT,QAAAC,eAAMqP,EAANnP,UAAA,kBAAA,WAAwB,MAAOV,MAAKyT,iBAClC,SAAetR,GACb,GAAIwR,GAAgB3T,KAAKyT,WACzBzT,MAAKyT,YACDzT,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,KAAWnC,KAAKG,aAAauT,QACpFkC,KAAKC,MAAM7V,KAAKG,aAAa+T,QAAQP,GA1BjB,KA2BpBiC,KAAKC,MAAM7V,KAAKG,aAAa+T,QAAQlU,KAAKyT,aA3BtB,KA4BtBzT,KAAK6T,yCAOXtT,OAAAC,eAAMqP,EAANnP,UAAA,gBAAA,WAA6B,MAAOV,MAAKwB,eACvC,SAAaW,GACXnC,KAAKwB,UAAYxB,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,IACxEnC,KAAK8V,cAAgB9V,KAAKwB,WAAaxB,KAAKG,aAAa+T,QAAQlU,KAAKwB,4CA+BxEqO,EAAFnP,UAAAoK,mBAAE,WACE9K,KAAK6T,SAIPhE,EAAFnP,UAAAmT,MAAE,WAAA,GAAFzR,GAAApC,IACIA,MAAK+V,WAAa/V,KAAKG,aAAa+T,QAAQlU,KAAKG,aAAauT,QAC9D,IAAIsC,GAAahW,KAAKG,aAAa+T,QAAQlU,KAAKyT,aAC5CwC,EAAeD,EA7EK,EA8ExBhW,MAAKkW,SACL,KAAK,GAAI9C,GAAI,EAAG+C,KAAoB/C,EA/EZ,GA+E8BA,IACpD+C,EAAId,KAAKW,EAAaC,EAAe7C,GA9EhB,GA+EjB+C,EAAIpE,SACN/R,KAAKkW,OAAOb,KAAKc,EAAIjD,IAAI,SAAAkD,GAAQ,MAAAhU,GAAKiU,mBAAmBD,MACzDD,KAGJnW,MAAK4N,mBAAmBW,gBAI1BsB,EAAFnP,UAAA4V,cAAE,SAAcF,GACZpW,KAAK+G,aAAalF,KAAK7B,KAAKG,aAAaoU,WAAW6B,EAAM,EAAG,GAC7D,IAAIG,GAAQvW,KAAKG,aAAakU,SAASrU,KAAKmU,YACxCa,EACAhV,KAAKG,aAAa8U,kBAAkBjV,KAAKG,aAAaoU,WAAW6B,EAAMG,EAAO,GAClFvW,MAAK0S,eAAe7Q,KAAK7B,KAAKG,aAAaoU,WAAW6B,EAAMG,EACxDX,KAAKvM,IAAIrJ,KAAKG,aAAaqV,QAAQxV,KAAKmU,YAAaa,MAG3DnF,EAAFnP,UAAA8V,eAAE,WACE,MAAOxW,MAAKG,aAAa+T,QAAQlU,KAAKmU,YApGd,IAwGlBtE,EAAVnP,UAAA2V,mBAAA,SAA6BD,GACzB,GAAIK,GAAWzW,KAAKG,aAAauW,YAAY1W,KAAKG,aAAaoU,WAAW6B,EAAM,EAAG,GACnF,OAAO,IAAIjF,GAAgBiF,EAAMK,EAAUA,EAAUzW,KAAK2W,eAAeP,KAInEvG,EAAVnP,UAAAiW,eAAA,SAAyBP,GACrB,IAAKpW,KAAKsV,WACR,OAAO,CAMT,KAAK,GAHCsB,GAAc5W,KAAKG,aAAaoU,WAAW6B,EAAM,EAAG,GAGjD3U,EAAOmV,EAAa5W,KAAKG,aAAa+T,QAAQzS,IAAS2U,EAC9D3U,EAAOzB,KAAKG,aAAa0W,gBAAgBpV,EAAM,GAC/C,GAAIzB,KAAKsV,WAAW7T,GAClB,OAAO,CAIX,QAAO,GAODoO,EAAVnP,UAAAyI,oBAAA,SAA8BkD,GAC1B,MAAQrM,MAAKG,aAAamM,eAAeD,IAAQrM,KAAKG,aAAaoK,QAAQ8B,GAAQA,EAAM,qBA5H7FrG,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,sBACEiC,SAAU,qaACVlJ,SAAU,mBACVI,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,+HA3BAmK,EAAAnJ,sEAiCA4O,aAAAtP,KAAGY,EAAAA,QAcH8L,iBAAG1M,KAAHc,EAAAA,SASAC,eAAAf,KAAAc,EAAAA,UAMA+I,kBCYE,QAAFD,GAAiCzP,EAC2B4H,EACtC6F,GAClB,GAH6B5N,KAAjCG,aAAiCA,EAC2BH,KAA5D+H,aAA4DA,EACtC/H,KAAtB4N,mBAAsBA,EAtBtB5N,KAAA0S,eAAuD,GAAIxK,GAAAA,aAG3DlI,KAAAgH,cAAsD,GAAIkB,GAAAA,cAoBjDlI,KAAKG,aACR,KAAMG,GAA2B,cAEnC,KAAKN,KAAK+H,aACR,KAAMzH,GAA2B,mBAGnCN,MAAKyT,YAAczT,KAAKG,aAAauT,QA3BzC,MA3BAnT,QAAAC,eAAMoP,EAANlP,UAAA,kBAAA,WAAwB,MAAOV,MAAKyT,iBAClC,SAAetR,GACb,GAAIwR,GAAgB3T,KAAKyT,WACzBzT,MAAKyT,YACDzT,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,KAAWnC,KAAKG,aAAauT,QACpF1T,KAAKG,aAAa+T,QAAQP,IAAkB3T,KAAKG,aAAa+T,QAAQlU,KAAKyT,cAC7EzT,KAAK6T,yCAOXtT,OAAAC,eAAMoP,EAANlP,UAAA,gBAAA,WAA6B,MAAOV,MAAKwB,eACvC,SAAaW,GACXnC,KAAKwB,UAAYxB,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,IACxEnC,KAAK8W,eAAiB9W,KAAK+W,uBAAuB/W,KAAKwB,4CAyCzDoO,EAAFlP,UAAAoK,mBAAE,WACE9K,KAAK6T,SAIPjE,EAAFlP,UAAAsW,eAAE,SAAeT,GACb,GAAMU,GACAjX,KAAKG,aAAaoU,WAAWvU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAAaoC,EAAO,EAEtFvW,MAAKgH,cAAcnF,KAAKoV,EAExB,IAAMjC,GAAchV,KAAKG,aAAa8U,kBAAkBgC,EAExDjX,MAAK0S,eAAe7Q,KAAK7B,KAAKG,aAAaoU,WACvCvU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAAaoC,EAC5CX,KAAKvM,IAAIrJ,KAAKG,aAAaqV,QAAQxV,KAAKmU,YAAaa,MAI3DpF,EAAFlP,UAAAmT,MAAE,WAAA,GAAFzR,GAAApC,IACIA,MAAK8W,eAAiB9W,KAAK+W,uBAAuB/W,KAAK+K,UACvD/K,KAAKkX,YAAclX,KAAK+W,uBAAuB/W,KAAKG,aAAauT,SACjE1T,KAAKmX,WAAanX,KAAKG,aAAauW,YAAY1W,KAAKmU,WAErD,IAAIiD,GAAapX,KAAKG,aAAauU,cAAc,QAEjD1U,MAAKqX,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKnE,IAAI,SAAAiD,GAAO,MAAAA,GAAIjD,IACvE,SAAAqD,GAAS,MAAAnU,GAAKkV,oBAAoBf,EAAOa,EAAWb,QACxDvW,KAAK4N,mBAAmBW,gBAOlBqB,EAAVlP,UAAAqW,uBAAA,SAAiCtV,GAC7B,MAAOA,IAAQzB,KAAKG,aAAa+T,QAAQzS,IAASzB,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAC7EnU,KAAKG,aAAakU,SAAS5S,GAAQ,MAIjCmO,EAAVlP,UAAA4W,oBAAA,SAA8Bf,EAAegB,GACzC,GAAIlG,GAAYrR,KAAKG,aAAasK,OAC9BzK,KAAKG,aAAaoU,WAAWvU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAAaoC,EAAO,GAChFvW,KAAK+H,aAAa2C,QAAQ8M,mBAC9B,OAAO,IAAIrG,GACPoF,EAAOgB,EAAU5C,oBAAqBtD,EAAWrR,KAAKyX,gBAAgBlB,KAIpE3G,EAAVlP,UAAA+W,gBAAA,SAA0BlB,GACtB,IAAKvW,KAAKsV,WACR,OAAO,CAOT,KAAK,GAJDV,GAAe5U,KAAKG,aAAaoU,WACjCvU,KAAKG,aAAa+T,QAAQlU,KAAKmU,YAAaoC,EAAO,GAG9C9U,EAAOmT,EAAc5U,KAAKG,aAAakU,SAAS5S,IAAS8U,EAC7D9U,EAAOzB,KAAKG,aAAa0W,gBAAgBpV,EAAM,GAClD,GAAIzB,KAAKsV,WAAW7T,GAClB,OAAO,CAIX,QAAO,GAODmO,EAAVlP,UAAAyI,oBAAA,SAA8BkD,GAC1B,MAAQrM,MAAKG,aAAamM,eAAeD,IAAQrM,KAAKG,aAAaoK,QAAQ8B,GAAQA,EAAM,qBA/I7FrG,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,gBACEiC,SAAU,2eACVlJ,SAAU,cACVI,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,0LAdAM,KAAQ2P,EAAAA,qBAFR/F,EAAElJ,sEAsBF4O,aAAAtP,KAAGY,EAAAA,QAaH8L,iBAAG1M,KAAHc,EAAAA,SASAE,gBAAAhB,KAAAc,EAAAA,UAMA8I,kBC8HE,QAAFJ,GAAsB1H,EACA6F,EACA9J,EACY1D,EAC0B4H,EAC9C2P,EACoBtX,GANhC,GAAFgC,GAAApC,IAQI,IARkBA,KAAtB8H,YAAsBA,EACA9H,KAAtB2N,MAAsBA,EACA3N,KAAtB6D,QAAsBA,EACY7D,KAAlCG,aAAkCA,EAC0BH,KAA5D+H,aAA4DA,EAE1B/H,KAAlCI,KAAkCA,EA3HlCJ,KAAA6G,UAAwD,QA8BxD7G,KAAA0S,eAAuD,GAAIxK,GAAAA,aAM3DlI,KAAA+G,aAAqD,GAAImB,GAAAA,aAMzDlI,KAAAgH,cAAsD,GAAIkB,GAAAA,aAG1DlI,KAAA2S,eAA0D,GAAIzK,GAAAA,aAY9DlI,KAAA2X,oBAAwB,SAAClW,GACrB,QAASA,KACHW,EAAKkT,YAAclT,EAAKkT,WAAW7T,OACnCW,EAAKwV,SAAWxV,EAAKjC,aAAamJ,YAAY7H,EAAMW,EAAKwV,UAAY,MACrExV,EAAKyV,SAAWzV,EAAKjC,aAAamJ,YAAY7H,EAAMW,EAAKyV,UAAY,KAgEtE7X,KAAKG,aACR,KAAMG,GAA2B,cAGnC,KAAKN,KAAK+H,aACR,KAAMzH,GAA2B,mBAGnCN,MAAK8X,aAAenK,EAAMI,QAAQ7L,UAAU,WAAM,MAAAwV,GAAkBnJ,iBA/ExE,MA7DAhO,QAAAC,eAAMgP,EAAN9O,UAAA,eAAA,WAA4B,MAAOV,MAAK+X,cACtC,SAAY5V,GACVnC,KAAK+X,SAAW/X,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,qCAS3E5B,OAAAC,eAAMgP,EAAN9O,UAAA,gBAAA,WAA6B,MAAOV,MAAKwB,eACvC,SAAaW,GACXnC,KAAKwB,UAAYxB,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,qCAM5E5B,OAAAC,eAAMgP,EAAN9O,UAAA,eAAA,WAA4B,MAAOV,MAAKgY,cACtC,SAAY7V,GACVnC,KAAKgY,SAAWhY,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,qCAM3E5B,OAAAC,eAAMgP,EAAN9O,UAAA,eAAA,WAA4B,MAAOV,MAAKiY,cACtC,SAAY9V,GACVnC,KAAKiY,SAAWjY,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,qCA8CzE5B,OAAFC,eAAMgP,EAAN9O,UAAA,mBAAE,WAAuB,MAAOV,MAAKkY,wBACnC,SAAgB/V,GACdnC,KAAKkY,mBAAqBlY,KAAKG,aAAagY,UAAUhW,EAAOnC,KAAK4X,QAAS5X,KAAK6X,0CAQlFtX,OAAFC,eAAMgP,EAAN9O,UAAA,yBAAE,WACE,GAAyB,SAArBV,KAAKoY,aACP,MAAOpY,MAAKG,aAAasK,OAAOzK,KAAKyT,YAAazT,KAAK+H,aAAa2C,QAAQ2N,gBACvE1D,mBAEP,IAAyB,QAArB3U,KAAKoY,aACP,MAAOpY,MAAKG,aAAauW,YAAY1W,KAAKyT,YAE5C,IAAMuC,GAAahW,KAAKG,aAAa+T,QAAQlU,KAAKyT,YAKlD,OAJwBzT,MAAKG,aAAauW,YACtC1W,KAAKG,aAAaoU,WAAWyB,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BhW,KAAKG,aAAauW,YACrC1W,KAAKG,aAAaoU,WAAWyB,EF/IT,GE+IqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFzV,OAAFC,eAAMgP,EAAN9O,UAAA,0BAAE,WACE,MAA4B,SAArBV,KAAKoY,aACRpY,KAAK2N,MAAMsD,2BAA6BjR,KAAK2N,MAAMqD,wDAIzDzQ,OAAFC,eAAMgP,EAAN9O,UAAA,wBAAE,WACE,OACE6V,MAASvW,KAAK2N,MAAM+C,eACpB0F,KAAQpW,KAAK2N,MAAMiD,cACnB0H,aAActY,KAAK2N,MAAMmD,oBACzB9Q,KAAKoY,+CAIT7X,OAAFC,eAAMgP,EAAN9O,UAAA,wBAAE,WACE,OACE6V,MAASvW,KAAK2N,MAAMgD,eACpByF,KAAQpW,KAAK2N,MAAMkD,cACnByH,aAActY,KAAK2N,MAAMoD,oBACzB/Q,KAAKoY,+CAsBT5I,EAAF9O,UAAAoK,mBAAE,WACE9K,KAAKyT,YAAczT,KAAK2G,SAAW3G,KAAKG,aAAauT,QACrD1T,KAAKuY,mBACLvY,KAAKoY,aAAepY,KAAK6G,WAG3B2I,EAAF9O,UAAAsK,YAAE,WACEhL,KAAK8X,aAAa1W,eAGpBoO,EAAF9O,UAAAoN,YAAE,SAAYC,GACV,GAAMyK,GAASzK,EAAnB,SAAsCA,EAAtC,SAAyDA,EAAzD,UAEI,IAAIyK,IAAWA,EAAOC,YAAa,CACjC,GAAMC,GAAO1Y,KAAK2Y,WAAa3Y,KAAK4Y,UAAY5Y,KAAK6Y,aAEjDH,IACFA,EAAK7E,UAMXrE,EAAF9O,UAAAsT,cAAE,SAAcvS,GACPzB,KAAKG,aAAauB,SAASD,EAAMzB,KAAK+K,WACzC/K,KAAK0S,eAAe7Q,KAAKJ,IAK7B+N,EAAF9O,UAAAoY,6BAAE,SAA6BC,GAC3B/Y,KAAK+G,aAAalF,KAAKkX,IAIzBvJ,EAAF9O,UAAAsY,yBAAE,SAAyBC,GACvBjZ,KAAKgH,cAAcnF,KAAKoX,IAG1BzJ,EAAF9O,UAAAwY,cAAE,WACElZ,KAAK2S,eAAe9Q,QAItB2N,EAAF9O,UAAAyY,gBAAE,SAAgB1X,EAASiX,GACvB1Y,KAAKyT,YAAchS,EACnBzB,KAAKoY,aAAeM,GAItBlJ,EAAF9O,UAAA0Y,sBAAE,WACEpZ,KAAKoY,aAAoC,SAArBpY,KAAKoY,aAA0B,aAAe,SAIpE5I,EAAF9O,UAAA2Y,iBAAE,WACErZ,KAAKyT,YAAmC,SAArBzT,KAAKoY,aACpBpY,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,aAAc,GACvDzT,KAAKG,aAAaoZ,iBACdvZ,KAAKyT,YAAkC,QAArBzT,KAAKoY,cAA0B,GFxPjC,KE4P1B5I,EAAF9O,UAAA8Y,aAAE,WACExZ,KAAKyT,YAAmC,SAArBzT,KAAKoY,aACpBpY,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,YAAa,GACtDzT,KAAKG,aAAaoZ,iBACdvZ,KAAKyT,YAAkC,QAArBzT,KAAKoY,aAAyB,EFhQhC,KEoQ1B5I,EAAF9O,UAAA+Y,iBAAE,WACE,OAAKzZ,KAAK4X,WAGF5X,KAAK4X,UAAY5X,KAAK0Z,YAAY1Z,KAAKyT,YAAazT,KAAK4X,WAInEpI,EAAF9O,UAAAiZ,aAAE,WACE,OAAQ3Z,KAAK6X,UAAY7X,KAAK0Z,YAAY1Z,KAAKyT,YAAazT,KAAK6X,UAInErI,EAAF9O,UAAAkZ,2BAAE,SAA2B9U,GAIA,SAArB9E,KAAKoY,aACPpY,KAAK6Z,sCAAsC/U,GACb,QAArB9E,KAAKoY,aACdpY,KAAK8Z,qCAAqChV,GAE1C9E,KAAK+Z,0CAA0CjV,IAKnD0K,EAAF9O,UAAA6X,iBAAE,WAAA,GAAFnW,GAAApC,IACIA,MAAK6D,QAAQmW,kBAAkB,WAC7B5X,EAAKyB,QAAQC,SAASC,eAAeC,KAAKC,EAAAA,KAAK,IAAI/B,UAAU,WAC3DE,EAAK0F,YAAYiB,cAAckR,cAAc,6BAA6B7W,aAMxEoM,EAAV9O,UAAAgZ,YAAA,SAAsBQ,EAAUC,GAC5B,MAAyB,SAArBna,KAAKoY,aACApY,KAAKG,aAAa+T,QAAQgG,IAAUla,KAAKG,aAAa+T,QAAQiG,IACjEna,KAAKG,aAAakU,SAAS6F,IAAUla,KAAKG,aAAakU,SAAS8F,GAE7C,QAArBna,KAAKoY,aACApY,KAAKG,aAAa+T,QAAQgG,IAAUla,KAAKG,aAAa+T,QAAQiG,GAGhEvE,KAAKC,MAAM7V,KAAKG,aAAa+T,QAAQgG,GFjTpB,KEkTpBtE,KAAKC,MAAM7V,KAAKG,aAAa+T,QAAQiG,GFlTjB,KEsTlB3K,EAAV9O,UAAAmZ,sCAAA,SAAgD/U,GAC5C,GAAMsV,GAAQpa,KAAKqa,QAEnB,QAAQvV,EAAMC,SACZ,IAAKuV,GAAAA,WACHta,KAAKyT,YAAczT,KAAKG,aAAa0W,gBAAgB7W,KAAKyT,YAAa2G,EAAQ,GAAK,EACpF,MACF,KAAKG,GAAAA,YACHva,KAAKyT,YAAczT,KAAKG,aAAa0W,gBAAgB7W,KAAKyT,YAAa2G,GAAS,EAAI,EACpF,MACF,KAAKI,GAAAA,SACHxa,KAAKyT,YAAczT,KAAKG,aAAa0W,gBAAgB7W,KAAKyT,aAAc,EACxE,MACF,KAAK1H,GAAAA,WACH/L,KAAKyT,YAAczT,KAAKG,aAAa0W,gBAAgB7W,KAAKyT,YAAa,EACvE,MACF,KAAKgH,GAAAA,KACHza,KAAKyT,YAAczT,KAAKG,aAAa0W,gBAAgB7W,KAAKyT,YACtD,EAAIzT,KAAKG,aAAaqV,QAAQxV,KAAKyT,aACvC,MACF,KAAKiH,GAAAA,IACH1a,KAAKyT,YAAczT,KAAKG,aAAa0W,gBAAgB7W,KAAKyT,YACrDzT,KAAKG,aAAa8U,kBAAkBjV,KAAKyT,aACzCzT,KAAKG,aAAaqV,QAAQxV,KAAKyT,aACpC,MACF,KAAKkH,GAAAA,QACH3a,KAAKyT,YAAc3O,EAAMgH,OACrB9L,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,aAAc,GACtDzT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,aAAc,EAC3D,MACF,KAAKmH,GAAAA,UACH5a,KAAKyT,YAAc3O,EAAMgH,OACrB9L,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,YAAa,GACrDzT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,YAAa,EAC1D,MACF,KAAKoH,GAAAA,MAOH,YANI7a,KAAK2X,oBAAoB3X,KAAKyT,eAChCzT,KAAKgU,cAAchU,KAAKyT,aACxBzT,KAAKkZ,gBAELpU,EAAMmH,kBAGV,SAEE,OAGJjM,KAAKuY,mBAELzT,EAAMmH,kBAIAuD,EAAV9O,UAAAoZ,qCAAA,SAA+ChV,GAC3C,GAAMsV,GAAQpa,KAAKqa,QAEnB,QAAQvV,EAAMC,SACZ,IAAKuV,GAAAA,WACHta,KAAKyT,YAAczT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,YAAa2G,EAAQ,GAAK,EACtF,MACF,KAAKG,GAAAA,YACHva,KAAKyT,YAAczT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,YAAa2G,GAAS,EAAI,EACtF,MACF,KAAKI,GAAAA,SACHxa,KAAKyT,YAAczT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,aAAc,EAC1E,MACF,KAAK1H,GAAAA,WACH/L,KAAKyT,YAAczT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,YAAa,EACzE,MACF,KAAKgH,GAAAA,KACHza,KAAKyT,YAAczT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,aACvDzT,KAAKG,aAAakU,SAASrU,KAAKyT,aACrC,MACF,KAAKiH,GAAAA,IACH1a,KAAKyT,YAAczT,KAAKG,aAAamZ,kBAAkBtZ,KAAKyT,YACxD,GAAKzT,KAAKG,aAAakU,SAASrU,KAAKyT,aACzC,MACF,KAAKkH,GAAAA,QACH3a,KAAKyT,YACDzT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,YAAa3O,EAAMgH,QAAU,IAAM,EAC/E,MACF,KAAK8O,GAAAA,UACH5a,KAAKyT,YACDzT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,YAAa3O,EAAMgH,OAAS,GAAK,EAC7E,MACF,KAAK+O,GAAAA,MACH7a,KAAKmZ,gBAAgBnZ,KAAKyT,YAAa,QACvC,MACF,SAEE,OAGJzT,KAAKuY,mBAELzT,EAAMmH,kBAIAuD,EAAV9O,UAAAqZ,0CAAA,SAAoDjV,GAChD,OAAQA,EAAMC,SACZ,IAAKuV,GAAAA,WACHta,KAAKyT,YAAczT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,aAAc,EACzE,MACF,KAAK8G,GAAAA,YACHva,KAAKyT,YAAczT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,YAAa,EACxE,MACF,KAAK+G,GAAAA,SACHxa,KAAKyT,YAAczT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,aFjaxC,EEkanB,MACF,KAAK1H,GAAAA,WACH/L,KAAKyT,YAAczT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,YFpaxC,EEqanB,MACF,KAAKgH,GAAAA,KACHza,KAAKyT,YAAczT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,aACtDzT,KAAKG,aAAa+T,QAAQlU,KAAKyT,aF1ahB,GE2apB,MACF,KAAKiH,GAAAA,IACH1a,KAAKyT,YAAczT,KAAKG,aAAaoZ,iBAAiBvZ,KAAKyT,YF7avC,GE8aDzT,KAAKG,aAAa+T,QAAQlU,KAAKyT,aF9a9B,GE8a4D,EAChF,MACF,KAAKkH,GAAAA,QACH3a,KAAKyT,YACDzT,KAAKG,aAAaoZ,iBACdvZ,KAAKyT,YAAa3O,EAAMgH,QAAS,KFnbrB,GEobpB,MACF,KAAK8O,GAAAA,UACH5a,KAAKyT,YACDzT,KAAKG,aAAaoZ,iBACdvZ,KAAKyT,YAAa3O,EAAMgH,OAASgP,IFxbrB,GEybpB,MACF,KAAKD,GAAAA,MACH7a,KAAKmZ,gBAAgBnZ,KAAKyT,YAAa,OACvC,MACF,SAEE,OAGJzT,KAAKuY,mBAELzT,EAAMmH,kBAOAuD,EAAV9O,UAAAyI,oBAAA,SAA8BkD,GAC1B,MAAQrM,MAAKG,aAAamM,eAAeD,IAAQrM,KAAKG,aAAaoK,QAAQ8B,GAAQA,EAAM,MAInFmD,EAAV9O,UAAA2Z,kBACI,MAAOra,MAAKI,MAA4B,QAApBJ,KAAKI,KAAK+B,sBArblC6D,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,eACEiC,SAAU,2iDACVC,QAAF,67CACE/B,MACFgC,MAAA,gBAEApJ,SAAA,cACAI,cAAAC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,4EArCAM,KAAE+U,EAAAA,SAiBF/U,KAAQM,EAAAA,YAARhB,aAAAU,KAAAO,EAAAA,aAbAP,SAAEE,GAAFZ,aAAAU,KAAAO,EAAAA,WAAAP,KAAAG,EAAAA,OAAAC,MAAAkH,EAAAA,sBASAtH,KAAQ2P,EAAAA,oBAiKR3P,KAAAQ,EAAAA,eAAAlB,aAAAU,KAAAO,EAAAA,cAzJAiJ,EAAQ9I,oEAwBRqE,WAAA/E,KAAAY,EAAAA,QAQAgR,UAAA5R,KAAAY,EAAAA,QAGAiR,UAAA7R,KAAAY,EAAAA,QAQA0O,aAAAtP,KAAAY,EAAAA,QAQA8L,iBAAA1M,KAAAc,EAAAA,SAQAC,eAAAf,KAAAc,EAAAA,SAGAE,gBAAAhB,KAAAc,EAAAA,SAMA6L,iBAAA3M,KAAAc,EAAAA,SAMA6R,YAAA3S,KAAAgV,EAAAA,UAAA5U,MAAAuJ,KAGAiJ,WAAA5S,KAAAgV,EAAAA,UAAA5U,MAAAwJ,KAGAiJ,gBAAA7S,KAAAgV,EAAAA,UAAA5U,MAAAyJ,MAMAL,KVhFIyL,EAAgB,EAGP5U,EACT,GAAI6U,GAAAA,eAAqC,kCAShClL,GACX7I,QAASd,EACT8U,MAAOC,EAAAA,SACPC,WAAYlL,8BA4Bd,MAEET,GAAFhP,UAAAoK,mBAAE,WACE9K,KAAKsb,UAAU/C,mCApBnBvS,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,yBACEiC,SAAU,oeACVC,QAAF,+sBACE/B,MACFgC,MAAA,yBACM4M,uCAAN,sBAEAhW,SAAA,uBACAI,cAAAC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,4GAOAgK,gEA6IA1P,KAAAsE,SAAAA,EAAsBtE,KAAtB6D,QAAsBA;eACA7D,KAAtBC,kBAAAA,EACsBD,KAAtBE,gBAAAA,EACsBF,KAAtBG,aAAAA,EAC8DH,KAA9DI,KAAAA,EACkCJ,KAAlCK,UAA8CA,qbAP9C,KAAAC,GAAA,eApDA,MAgEAC,QAAAC,eAAAC,EAAAC,UAAA,WACAC,+FA7HAC,0FAGAC,YAAA,EACAC,cAAA,gJAaAD,YAAA,EACAC,cAAA,wKAOAF,gDAEAG,KAAAf,KAAAgB,YACAhB,KAAAgB,UAAUD,EAEFf,KAARiB,gBAAAC,KAAAH,KAGAF,YAAA,EACAC,cAAA,8IAmCEA,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDAmCAd,KAAAmB,mBAAAC,cACIpB,KAAKiB,gBAATI,WACQrB,KAARsB,WACQtB,KAARsB,UAAAC,+DAQAvB,MAAAwB,UAAAC,EACAzB,KAAAG,aAAAuB,SAAmBC,EAAnB3B,KAAkCwB,YAC1BxB,KAAR4B,gBAAAC,KAAAJ,qLAoBA,IAAAzB,KAAA8B,iBAAA,KAAAC,OAAA,8DAEA/B,MAAA8B,iBAAAE,EACAhC,KAAAmB,mBACQnB,KAAR8B,iBAAAG,aAAAC,UAAA,SAAAC,GAAA,MAAAC,GAAAZ,UAAAW,mEAQA,IAAAnC,KAAY8B,iBACZ,KAAAC,OAAA,+DAEM/B,MAANK,YACAL,KAAAqC,0BAAArC,KAAAK,UAAAiC,eAEAtC,KAAAuC,QAAAvC,KAAAwC,gBAAAxC,KAAAyC,eACAzC,KAAA0C,SAAA,EAEI1C,KAAK2C,aAATd,gDAMA,IAAA7B,KAAA0C,QAAA,CAEM1C,KAANsB,WAAAtB,KAAAsB,UAAAsB,eACA5C,KAAAsB,UAAAuB,SAEM7C,KAAK8C,aACX9C,KAAA8C,WAAAC,QACQ/C,KAAK8C,WAAa,MAEpB9C,KAAKgD,iBAAXhD,KAAAgD,gBAAAC,YACAjD,KAAAgD,gBAAAH,QAEA,IAAAK,GAAA,oCAMUd,EAAKe,aAAftB,OACQO,EAAKC,0BAAb,MAGArC,MAAAqC,2BACA,kBAAArC,MAAAqC,0BAAAe,6DAWAF,qIAOQG,iBAAkBrD,KAA1BC,kBACMqD,WAAN,0BAEAtD,KAAA8C,WAAkBS,cAAlBrB,UAAA,WAAA,MAAAE,GAAAW,UACA/C,KAAA8C,WAAAU,kBAAAC,WAAAzD,oDAYA,iGAJAA,KAAAsB,WACAtB,KAAA0D,gBAGA1D,KAAAsB,UAAAsB,cAAA,CACA5C,KAAAsB,UAAAqC,OAAA3D,KAAAgD,iBAEAY,SAAAH,WAAAzD,KAGMA,KAAN6D,QAAmBC,SAASC,eAA5BC,KAAAC,EAAAA,KAAA,IAAA/B,UAAA,uKAWAgC,aAAA,EACMC,cAAN,mCACMC,UAAWpE,KAAjBI,KAAAJ,KAAAI,KAAA+B,MAAA,MACMkC,eAANrE,KAAAE,kBACMoD,WAAN,wBAEAtD,MAAAsB,UAAAtB,KAAAsE,SAAAC,OAAwCC,GACxCC,EAAAA,MAAAzE,KAAAsB,UAAAoD,gBAAA1E,KAAAsB,UAAAqD,cAAA3E,KAAAsB,UAAAsD,gBAAAZ,KAAAa,EAAAA,OAAA,SAAAC,GAAA,MAAAA,GAAAC,UAAAC,EAAAA,WAAA9C,UAAA,WAAA,MAAAE,GAAAW,mOAaAkC,sBAAAC,QAAA,QAAAC,QAAA,QAAAC,SAAA,QAAAC,SAAA,WACOJ,sBAAPC,QAAA,MAAAC,QAAA,WAAAC,SACgB,MADhBC,SAAA,QAIOJ,sBACEC,QAAS,MAAOC,QAAS,QAC1BC,SAAS,MAFjBC,SAAA,yIAmBA5E,EAAA6E,2EAhUAC,SAAA,gBACEC,gBAAiBC,EAAAA,wBAAnBC,OACEC,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,MAIArF,EAAAsF,eAAA,WAAA,QACAC,KAAAC,EAAAA,uEA3EAD,SAAQE,GAARZ,aAAAU,KAAAG,EAAAA,OAAAC,MAAAC,OA5BAL,KAAEM,EAAAA,YAAFhB,aAAAU,KAAAO,EAAAA,aAmBAP,KAAEQ,EAAAA,eAAFlB,aAAAU,KAAAO,EAAAA,aAKAP,SAAEE,GAAFZ,aAAAU,KAAAO,EAAAA,WAAAP,KAAAG,EAAAA,OAAAC,MAAAK,EAAAA,eAGAhG,EAAAiG,gBA/BAC,UAAAX,KAAAY,EAAAA,QA2OAC,YAAAb,KAAAY,EAAAA,2DA7HAhF,kBAAAoE,KAAAc,EAAAA,SAYAC,eAAAf,KAAAc,EAAAA,SAMAE,gBAAGhB,KAAHc,EAAAA,SAQAxD,aAAA0C,KAAAY,EAAAA,QAoBAjE,eAAAqD,KAAAc,EAAAA,OAAAV,MAAA,YAMAjD,eAAA6C,KAAGc,EAAAA,OAAHV,MAAA,YAMAa,SAAAjB,KAAAY,EAAAA,SAMAnG,KC9IayG,GACXC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,GAIIC,GACXN,QAASO,EAAAA,cACTL,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,GASTG,EAAA,WAIE,QAAFA,GAEWC,EAEAC,GAFA7H,KAAX4H,OAAWA,EAEA5H,KAAX6H,cAAWA,EACP7H,KAAKmC,MAAQnC,KAAK4H,OAAOzF,MApE7B,MAAAwF,mBAmOE,QAAFJ,GACcO,EACW3H,EAC2B4H,EAC1BC,GAJxB,GAAF5F,GAAApC,IAKI,IAJUA,KAAd8H,YAAcA,EACW9H,KAAzBG,aAAyBA,EAC2BH,KAApD+H,aAAoDA,EAC1B/H,KAA1BgI,WAA0BA,EA/D1BhI,KAAAiI,WAAM,GAAIC,GAAAA,aAIVlI,KAAAmI,UAAM,GAAID,GAAAA,aAGVlI,KAAAiC,aAAiB,GAAIiG,GAAAA,aAGrBlI,KAAAiB,gBAAoB,GAAIiH,GAAAA,aAExBlI,KAAAoI,WAAe,aAEfpI,KAAAqI,aAA+C,aAE/CrI,KAAAsI,mBAA+B,aAE/BtI,KAAAuI,wBAAoCC,EAAAA,aAAaC,MAEjDzI,KAAA0I,oBAAgCF,EAAAA,aAAaC,MAG7CzI,KAAA2I,gBAAyC,WACrC,MAAOvG,GAAKwG,gBACR,MAAQC,oBAAuBC,KAAQ1G,EAAK0F,YAAYiB,cAAc5G,SAI9EnC,KAAAgJ,cAAuC,SAACC,GACpC,GAAMC,GAAe9G,EAAK+G,oBAAoB/G,EAAKjC,aAAaiJ,YAAYH,EAAQ9G,OACpF,QAASC,EAAKiH,MAAQH,GAClB9G,EAAKjC,aAAamJ,YAAYlH,EAAKiH,IAAKH,IAAiB,EACzD,MAAQK,kBAAqBF,IAAOjH,EAAKiH,IAAKG,OAAUN,KAIhElJ,KAAAyJ,cAAuC,SAACR,GACpC,GAAMC,GAAe9G,EAAK+G,oBAAoB/G,EAAKjC,aAAaiJ,YAAYH,EAAQ9G,OACpF,QAASC,EAAKsH,MAAQR,GAClB9G,EAAKjC,aAAamJ,YAAYlH,EAAKsH,IAAKR,IAAiB,EACzD,MAAQS,kBAAqBD,IAAOtH,EAAKsH,IAAKF,OAAUN,KAIhElJ,KAAA4J,iBAA0C,SAACX,GACvC,GAAMC,GAAe9G,EAAK+G,oBAAoB/G,EAAKjC,aAAaiJ,YAAYH,EAAQ9G,OACpF,OAAQC,GAAKyH,aAAgBX,IAAgB9G,EAAKyH,YAAYX,IAClDY,qBAAuB,GAA/B,MAKR9J,KAAA+J,WAAMC,EAAAA,WAAWC,SACNjK,KAAK2I,gBAAiB3I,KAAKgJ,cAAehJ,KAAKyJ,cAAezJ,KAAK4J,mBAG9E5J,KAAA4I,iBAA4B,GAOnB5I,KAAKG,aACR,KAAMG,GAA2B,cAEnC,KAAKN,KAAK+H,aACR,KAAMzH,GAA2B,mBAInCN,MAAK0I,oBAAsBvI,EAAa+J,cAAchI,UAAU,WAC9DE,EAAKD,MAAQC,EAAKD,QAjPxB,MAkGA5B,QAAAC,eAAM+G,EAAN7G,UAAA,qBAAA,SAAoByB,GAChBnC,KAAKmK,mBAAmBhI,oCAIlBoF,EAAV7G,UAAAyJ,mBAAA,SAA6BhI,GACrBA,IACFnC,KAAKoK,YAAcjI,EACnBnC,KAAKoK,YAAYC,eAAerK,QAMtCO,OAAAC,eAAM+G,EAAN7G,UAAA,2BAAA,SAA0ByB,GACtBnC,KAAK6J,YAAc1H,EACnBnC,KAAKsI,sDAMT/H,OAAAC,eAAM+G,EAAN7G,UAAA,aAAA,WAA0B,MAAOV,MAAKsK,YACpC,SAAUnI,GACRA,EAAQnC,KAAKG,aAAaiJ,YAAYjH,GACtCnC,KAAK4I,iBAAmBzG,GAASnC,KAAKG,aAAaoK,QAAQpI,GAC3DA,EAAQnC,KAAKmJ,oBAAoBhH,EACjC,IAAIqI,GAAUxK,KAAKmC,KACnBnC,MAAKsK,OAASnI,EACdnC,KAAK8H,YAAYiB,cAAc5G,MAC3BA,EAAQnC,KAAKG,aAAasK,OAAOtI,EAAOnC,KAAK+H,aAAa2C,QAAQvC,WAAa,GAC9EnI,KAAKG,aAAauB,SAAS8I,EAASrI,IACvCnC,KAAKiC,aAAaJ,KAAKM,oCAO7B5B,OAAAC,eAAM+G,EAAN7G,UAAA,WAAA,WAAwB,MAAOV,MAAK2K,UAClC,SAAQxI,GACNnC,KAAK2K,KAAO3K,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,IACnEnC,KAAKsI,sDAMT/H,OAAAC,eAAM+G,EAAN7G,UAAA,WAAA,WAAwB,MAAOV,MAAK4K,UAClC,SAAQzI,GACNnC,KAAK4K,KAAO5K,KAAKmJ,oBAAoBnJ,KAAKG,aAAaiJ,YAAYjH,IACnEnC,KAAKsI,sDAMT/H,OAAAC,eAAM+G,EAAN7G,UAAA,gBAAA,WAA4B,QAASV,KAAKgB,eACxC,SAAamB,GACX,GAAMpB,GAAW8J,EAAAA,sBAAsB1I,EAEnCnC,MAAKgB,YAAcD,IACrBf,KAAKgB,UAAYD,EACjBf,KAAKiB,gBAAgBY,KAAKd,qCAoF9BwG,EAAF7G,UAAAoK,mBAAE,WAAA,GAAF1I,GAAApC,IACQA,MAAKoK,cACPpK,KAAKuI,wBACDvI,KAAKoK,YAAYxI,gBAAgBM,UAAU,SAAC6I,GAC1C3I,EAAKD,MAAQ4I,EACb3I,EAAKiG,aAAa0C,GAClB3I,EAAKgG,aACLhG,EAAK+F,UAAUtG,KAAK,GAAI8F,GAAwBvF,EAAMA,EAAK0F,YAAYiB,gBACvE3G,EAAK6F,WAAWpG,KAAK,GAAI8F,GAAwBvF,EAAMA,EAAK0F,YAAYiB,oBAKlFxB,EAAF7G,UAAAsK,YAAE,WACEhL,KAAKuI,wBAAwBnH,cAC7BpB,KAAK0I,oBAAoBtH,cACzBpB,KAAKiC,aAAaZ,WAClBrB,KAAKiB,gBAAgBI,YAIvBkG,EAAF7G,UAAAuK,0BAAE,SAA0BC,GACxBlL,KAAKsI,mBAAqB4C,GAI5B3D,EAAF7G,UAAAyK,SAAE,SAASC,GACP,MAAOpL,MAAK+J,WAAa/J,KAAK+J,WAAWqB,GAAK,MAIhD7D,EAAF7G,UAAA2K,6BAAE,WACE,MAAOrL,MAAKsL,6BAOd/D,EAAF7G,UAAA4K,0BAAE,WACE,MAAOtL,MAAKgI,WAAahI,KAAKgI,WAAWsD,4BAA8BtL,KAAK8H,aAI9EP,EAAF7G,UAAA6K,WAAE,SAAWpJ,GACTnC,KAAKmC,MAAQA,GAIfoF,EAAF7G,UAAA8K,iBAAE,SAAiBN,GACflL,KAAKqI,aAAe6C,GAItB3D,EAAF7G,UAAA+K,kBAAE,SAAkBP,GAChBlL,KAAKoI,WAAa8C,GAIpB3D,EAAF7G,UAAAgL,iBAAE,SAAiBC,GACf3L,KAAK4L,SAAWD,GAGlBpE,EAAF7G,UAAAmL,WAAE,SAAW/G,GACLA,EAAMgH,QAAUhH,EAAMC,UAAYgH,EAAAA,aACpC/L,KAAKoK,YAAY4B,OACjBlH,EAAMmH,mBAIV1E,EAAF7G,UAAAwL,SAAE,SAAS/J,GACP,GAAIV,GAAOzB,KAAKG,aAAagM,MAAMhK,EAAOnC,KAAK+H,aAAaoE,MAAMhE,UAClEnI,MAAK4I,iBAAmBnH,GAAQzB,KAAKG,aAAaoK,QAAQ9I,GAC1DA,EAAOzB,KAAKmJ,oBAAoB1H,GAChCzB,KAAKsK,OAAS7I,EACdzB,KAAKqI,aAAa5G,GAClBzB,KAAKiC,aAAaJ,KAAKJ,GACvBzB,KAAKmI,UAAUtG,KAAK,GAAI8F,GAAwB3H,KAAMA,KAAK8H,YAAYiB,iBAGzExB,EAAF7G,UAAA0L,UAAE,WACEpM,KAAKiI,WAAWpG,KAAK,GAAI8F,GAAwB3H,KAAMA,KAAK8H,YAAYiB,iBAOlExB,EAAV7G,UAAAyI,oBAAA,SAA8BkD,GAC1B,MAAQrM,MAAKG,aAAamM,eAAeD,IAAQrM,KAAKG,aAAaoK,QAAQ8B,GAAQA,EAAM,qBApQ7FrG,KAACuG,EAAAA,UAADnG,OACEoG,SAAU,uBACVC,WACEvF,EACAO,GACCN,QAASuF,EAAAA,yBAA0BrF,YAAaE,IAEnDoF,MACEC,uBAAwB,OACxBC,mBAAoB,kDACpBC,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZC,SAAU,eACVC,YAAa,sBAEf7H,SAAU,6DA/EZS,KAAEqH,EAAAA,aAmBFrH,KAAQM,EAAAA,YAARhB,aAAAU,KAqMOO,EAAAA,aACPP,SAAAE,GAAAZ,aAAAU,KAAOO,EAAAA,WAAPP,KAAmBG,EAAAA,OAAnBC,MAA0BkH,EAAAA,sBArM1BtH,KAAQuH,EAAAA,aAARjI,aAAAU,KAsMOO,EAAAA,gCAtIPiH,gBAAAxH,KAAGY,EAAAA,QAcHkD,sBAAA9D,KAAGY,EAAAA,QAQHzE,QAAA6D,KAAGY,EAAAA,QAiBHyC,MAAArD,KAAGY,EAAAA,QASH8C,MAAA1D,KAAGY,EAAAA,QASHgF,WAAA5F,KAAGY,EAAAA,QAaHqB,aAAAjC,KAAGc,EAAAA,SAIHqB,YAAAnC,KAAGc,EAAAA,UA3KHS,gCCAA,sBA8BAvB,KAACuG,EAAAA,UAADnG,OACEoG,SAAU,sEA/BZiB,KAiCAC,EAAA,WAoCE,QAAFA,GAAqBC,EAAkCC,GAAlC5N,KAArB2N,MAAqBA,EAAkC3N,KAAvD4N,mBAAuDA,EAlBvD5N,KAAA6N,cAA0BrF,EAAAA,aAAaC,MAgBvC,MATAlI,QAAAC,eAAMkN,EAANhN,UAAA,2BACI,WAA0BwF,KAAnBlG,KAAKgB,UAA0BhB,KAAKyD,WAAWmI,WAAa5L,KAAKgB,eAE1E,SAAamB,GACXnC,KAAKgB,UAAY6J,EAAAA,sBAAsB1I,oCASzCuL,EAAFhN,UAAAoN,YAAE,SAAYC,GACNA,EAAR,YACM/N,KAAKgO,sBAITN,EAAFhN,UAAAsK,YAAE,WACEhL,KAAK6N,cAAczM,eAGrBsM,EAAFhN,UAAAoK,mBAAE,WACE9K,KAAKgO,sBAGPN,EAAFhN,UAAAuN,MAAE,SAAMnJ,GACA9E,KAAKyD,aAAezD,KAAK4L,WAC3B5L,KAAKyD,WAAWuI,OAChBlH,EAAMoJ,oBAIFR,EAAVhN,UAAAsN,yCACUG,EAAqBnO,KAAKyD,WAAazD,KAAKyD,WAAWxC,gBAAkBmN,EAAAA,KACzEC,EAAgBrO,KAAKyD,YAAczD,KAAKyD,WAAW3B,iBACrD9B,KAAKyD,WAAW3B,iBAAiBb,gBAAkBmN,EAAAA,KACjDE,EAAoBtO,KAAKyD,WAC3BgB,EAAAA,MAAMzE,KAAKyD,WAAWd,aAAc3C,KAAKyD,WAAWN,cACpDiL,EAAAA,IAEJpO,MAAK6N,cAAczM,cACnBpB,KAAK6N,cAAgBpJ,EAAAA,MACnBzE,KAAK2N,MAAMI,QACXI,EACAE,EACAC,GACApM,UAAU,WAAM,MAAAE,GAAKwL,mBAAmBW,iCAtE9CvI,KAACwI,EAAAA,UAADpI,OAAAoG,SAAA,wBACEiC,SAAU,4hBACVC,QAAF,quBACE/B,MACFgC,MAAA,wBACMC,uCAAN,mCAEArJ,SAAA,sBACAI,cAAAC,EAAAA,kBAAAC,KACEC,qBAAF,EACEN,gBAAFC,EAAAA,wBAAAC,oFAlCAgI,EAAAhH,mFA0CAmI,cAAA7I,KAAA8I,EAAAA,aAAA1I,MAAAqH,MAaAC,KC3DAqB,EAAA,yBARA,sBA6BA/I,KAACgJ,EAAAA,SAAD5I,OACE6I,SACEC,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,YAEFC,SACEC,EACAC,EACAhP,EACAiP,EACAnI,EACAmG,EACAD,EACAkC,EACAC,EACAC,GAEFC,cACEN,EACAC,EACAhP,EACAiP,EACAnI,EACAmG,EACAD,EACAkC,EACAC,EACAC,GAEFpD,WACEsD,EACAC,GAEFC,iBACEP,6CAlEJX"}