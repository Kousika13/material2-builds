{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n  private _selectionSubscription: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /**\n   * The currently selected date.\n   * @deprecated use `selectionModel` to set selected date\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this.selectionModel.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this.selectionModel instanceof MatSingleDateSelectionModel) {\n      this.selectionModel.add(value);\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /**\n   * Emits when the currently selected date changes.\n   * @deprecated Listen to selectionModel valueChange.\n   * @breaking-change 9.0.0\n   */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              readonly selectionModel: MatDateSelectionModel<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n\n    // This should no longer be needed after deprecation of selectedChange\n    this._selectionSubscription = selectionModel.selectionChange.subscribe(() => {\n      this.selectedChange.emit(selectionModel.getFirstSelectedDate() || undefined);\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this._selectionSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /**\n   * Handles date selection in the month view.\n   * @deprecated listen to valueChange in `selectionModel`.\n   * @breaking-change 9.0.0 remove method.\n   */\n  _dateSelected(date: MatDateSelectionModel<D>): void {\n    if (this.selectionModel && !this.selectionModel.isSame(date)) {\n      this.selectedChange.emit(date.getFirstSelectedDate() || undefined);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{provide: MatDateSelectionModel, useClass: MatSingleDateSelectionModel}]\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._dateSelection.getSelection(); }\n  set _selected(value: D | null) {\n    this._dateSelection.setSelection(value);\n  }\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _subscriptions = new Subscription();\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MatDateSelectionModel) readonly _dateSelection:\n                  MatSingleDateSelectionModel<D>,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n\n    this._subscriptions.add(_dateSelection.selectionChange.subscribe(() => {\n      this._selectedChanged.next(_dateSelection.getSelection() || undefined);\n    }));\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._subscriptions.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._dateSelection.getSelection();\n    if (!this._dateAdapter.sameDate(oldValue, date)) {\n      this._dateSelection.add(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel,\n  ThemePalette\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    if (this._isSelectionInitialized) {\n      this._isSelectionInitialized = false;\n      this._selectionModel.ngOnDestroy();\n    }\n\n    this._selectionModel = this._datepicker._dateSelection;\n\n    this._formatValue(this._selectionModel.getSelection());\n\n    this._datepickerSubscription = this._datepicker._dateSelection.selectionChange.subscribe(() => {\n      this._formatValue(this._selectionModel.getSelection());\n      this._cvaOnChange(this._selectionModel.getSelection());\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._selectionModel ? this._selectionModel.getSelection() : null;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    const oldDate = this._selectionModel.getSelection();\n\n    if (!this._selectionModel) {\n      throw new Error('Input has no MatDatePicker associated with it.');\n    }\n\n    if (!this._dateAdapter.sameDate(value, oldDate)) {\n      this._selectionModel.setSelection(value);\n    }\n\n    this._lastValueValid = this._selectionModel.isValid();\n\n    this._formatValue(this._selectionModel.getSelection());\n\n    if (!this._dateAdapter.sameDate(value, oldDate)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _selectionModel: MatSingleDateSelectionModel<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  private _isSelectionInitialized = true;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n\n    // Set a default model to prevent failure when reading value. Gets overridden when the\n    // datepicker is set.\n    this._selectionModel = new MatSingleDateSelectionModel(_dateAdapter);\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    const current = this._selectionModel.getSelection();\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(current, date)) {\n      this._selectionModel.setSelection(date);\n      this._formatValue(date);\n      this._cvaOnChange(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | MatDateSelectionModel<D> | null) {\n    if (value instanceof MatDateSelectionModel) {\n      value = value.getFirstSelectedDate();\n    }\n\n    this._elementRef.nativeElement.value =\n        value && this._getValidDateOrNull(value) ?\n            this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  ViewEncapsulation,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {take} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n * @breaking-change 9.0.0 remove generic default type\n */\nexport class MatCalendarCell<D = unknown> {\n  constructor(\n      /** The range of dates represented by this cell (inclusive). */\n      public range: { start: D, end: D },\n      /** The text value to display in the cell. */\n      public displayValue: string,\n      /** The aria-label to use for the cell. */\n      public ariaLabel: string,\n      /** Whether the cell is enabled. */\n      public enabled: boolean,\n      public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n})\n// @breaking-change 9.0.0 remove generic default type\nexport class MatCalendarBody<D = unknown> implements OnChanges, OnDestroy {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell<D>[][];\n\n  /**\n   * The value in the table that corresponds to today.\n   * @deprecated No longer needed since MatCalendarBody now gets today value from DateAdapter.\n   * @breaking-change 9.0.0 remove this property\n   */\n  @Input() todayValue: number;\n\n  /**\n   * The value in the table that is currently selected.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selectedValue(): number {\n    if (this._selectionModel instanceof MatSingleDateSelectionModel) {\n      const date = this._selectionModel.getSelection();\n      if (date) {\n        const granularity = this._getFirstCellGranularity();\n        if (granularity == 'day') {\n          return this._dateAdapter.getDate(date);\n        } else if (granularity == 'month') {\n          return this._dateAdapter.getMonth(date);\n        } else {\n          return this._dateAdapter.getYear(date);\n        }\n      }\n    }\n    return null!;\n  }\n  set selectedValue(value: number) {\n    if (this._selectionModel instanceof MatSingleDateSelectionModel) {\n      if (value !== null) {\n        const date = this._selectionModel.getSelection() || this._getFirstCellRange().start;\n        const granularity = this._getFirstCellGranularity();\n        const year = granularity == 'year' ? value : this._dateAdapter.getYear(date);\n        const month = granularity == 'month' ? value : this._dateAdapter.getMonth(date);\n        const day = granularity == 'day' ? value : this._dateAdapter.getDate(date);\n        this._selectionModel.setSelection(this._dateAdapter.createDate(year, month, day));\n      } else {\n        this._selectionModel.setSelection(null);\n      }\n    }\n  }\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /**\n   * Emits when a new value is selected.\n   * @deprecated Please listen for selection change via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  private _today: D;\n  private _selectionSubscription: Subscription;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _cdr: ChangeDetectorRef,\n              private _dateAdapter: DateAdapter<D>,\n              readonly _selectionModel: MatDateSelectionModel<D>) {\n    this._updateToday();\n\n    this._selectionSubscription =\n        this._selectionModel.selectionChange.subscribe(() => this._cdr.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._selectionSubscription.unsubscribe();\n  }\n\n  _cellClicked(cell: MatCalendarCell<D>): void {\n    if (cell.enabled && this._selectionModel instanceof MatSingleDateSelectionModel) {\n      const date = cell.range.start;\n      const granularity = this._getFirstCellGranularity();\n      if (granularity == 'year') {\n        this.selectedValueChange.emit(this._dateAdapter.getYear(date));\n      } else if (granularity == 'month') {\n        this.selectedValueChange.emit(this._dateAdapter.getMonth(date));\n      } else {\n        this.selectedValueChange.emit(this._dateAdapter.getDate(date));\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  _isSelected(item: MatCalendarCell<D>): boolean {\n    return this._selectionModel.overlaps(item.range);\n  }\n\n  _isToday(item: MatCalendarCell<D>): boolean {\n    return this._dateAdapter.compareDate(item.range.start, this._today) <= 0 &&\n        this._dateAdapter.compareDate(item.range.end, this._today) >= 0;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  _updateToday() {\n    this._today = this._dateAdapter.today();\n    // Note(mmalerba): This is required to zero out the time portion of the date.\n    // Revisit this when we support time picking.\n    this._today = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this._today),\n        this._dateAdapter.getMonth(this._today),\n        this._dateAdapter.getDate(this._today));\n  }\n\n  // @breaking-change 9.0.0 remove when deprecated properties relying on it are removed.\n  private _getFirstCellRange() {\n    return (this.rows && this.rows[0] && this.rows[0][0] && this.rows[0][0].range);\n  }\n\n  // @breaking-change 9.0.0 remove when deprecated properties relying on it are removed.\n  private _getFirstCellGranularity(): 'day' | 'month' | 'year' {\n    const range = this._getFirstCellRange();\n    if (this._dateAdapter.getYear(range.start) == this._dateAdapter.getYear(range.end)) {\n      if (this._dateAdapter.getMonth(range.start) == this._dateAdapter.getMonth(range.end)) {\n        if (this._dateAdapter.getDate(range.start) == this._dateAdapter.getDate(range.end)) {\n          return 'day';\n        }\n        return 'month';\n      }\n      return 'year';\n    }\n    return 'day';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatMonthView<D> implements AfterContentInit, OnDestroy {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /**\n   * The currently selected date.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this._selectionModel.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this._selectionModel instanceof MatSingleDateSelectionModel) {\n      this._selectionModel.add(value);\n      this.extractDate();\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody<D>;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell<D>[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  private dateSubscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              readonly _selectionModel: MatDateSelectionModel<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n\n    this.extractDate();\n    this.dateSubscription = _selectionModel.selectionChange.subscribe(() => this.extractDate());\n  }\n\n  ngAfterContentInit() {\n    this._matCalendarBody._updateToday();\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this.dateSubscription.unsubscribe();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this._selectionModel.add(selectedDate);\n      this.selectedChange.emit(selectedDate);\n    }\n\n    if (this._selectionModel.isComplete()) {\n      this._userSelection.emit();\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this._selectionModel.getFirstSelectedDate());\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const range = {start: date, end: date};\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell<D>(range, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Extract selected date from current selection */\n  private extractDate() {\n    this._selectedDate = this._getDateInCurrentMonth(this._selectionModel.getFirstSelectedDate());\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /**\n   * The currently selected date.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this._selected.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this._selected instanceof MatSingleDateSelectionModel) {\n      this._selected.add(value);\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody<D>;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell<D>[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  private dateSubscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _selected: MatDateSelectionModel<D>,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n\n    this.dateSubscription = _selected.selectionChange.subscribe(() => this.extractYear());\n  }\n\n  ngAfterContentInit() {\n    this._matCalendarBody._updateToday();\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this.dateSubscription.unsubscribe();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this.extractYear();\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const start: D = this._dateAdapter.createDate(year, 0, 1);\n    const end: D = this._dateAdapter.createDate(year, 11, 31);\n    const range = {start, end};\n    const yearName = this._dateAdapter.getYearName(start);\n    return new MatCalendarCell(range, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  private extractYear() {\n    const date = this._selected.getFirstSelectedDate();\n    this._selectedYear = date && this._dateAdapter.getYear(date);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatYearView<D> implements AfterContentInit, OnDestroy {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /**\n   * The currently selected date.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this._selected.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this._selected instanceof MatSingleDateSelectionModel) {\n      this._selected.add(value);\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody<D>;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell<D>[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  private dateSubscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _selected: MatDateSelectionModel<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n\n    this.extractCurrentMonth();\n    this.dateSubscription = _selected.selectionChange.subscribe(() => this.extractCurrentMonth());\n  }\n\n  ngAfterContentInit() {\n    this._matCalendarBody._updateToday();\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this.dateSubscription.unsubscribe();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const year = this._dateAdapter.getYear(this.activeDate);\n    const start = this._dateAdapter.createDate(year, month, 1);\n    const ariaLabel = this._dateAdapter.format(start, this._dateFormats.display.monthYearA11yLabel);\n    const range = {\n      start,\n      end: this._dateAdapter.createDate(year, month, this._dateAdapter.getNumDaysInMonth(start))\n    };\n    return new MatCalendarCell(\n        range, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  private extractCurrentMonth() {\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected.getFirstSelectedDate());\n  }\n}\n"],"names":["exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","DateAdapter","decorators","Optional","undefined","Inject","args","MAT_DATE_FORMATS","ChangeDetectorRef","MatCalendarHeader","_this","this","selectionModel","_dateAdapter","_dateFormats","_changeDetectorRef","createMissingDateImplError","_intlChanges","_intl","changes","subscribe","markForCheck","stateChanges","next","_selectionSubscription","selectionChange","selectedChange","emit","getFirstSelectedDate","Object","defineProperty","MatCalendar","prototype","get","enumerable","configurable","add","value","_moveFocusOnNextTick","activeDate","startAt","today","_currentView","startView","focusActiveCell","unsubscribe","complete","change","minDate","maxDate","dateFilter","view","_getCurrentViewComponent","detectChanges","_init","currentView","monthView","ngAfterContentInit","date","Component","selector","styles","host","class","providers","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","ctorParameters","MatDatepickerIntl","propDecorators","headerComponent","Input","dateClass","Output","yearSelected","monthSelected","_userSelection","ViewChild","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_elementRef","_MatDatepickerContentMixinBase","mixinColor","MatDatepickerContent","_super","elementRef","call","tslib_1.__extends","ngAfterViewInit","_calendar","template","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","_dialog","_overlay","_ngZone","_viewContainerRef","_dateSelection","_dir","_document","_scrollStrategy","scrollStrategy","_subscriptions","_selectedChanged","getSelection","MatDatepicker","_startAt","_datepickerInput","set","_getThemePalette","disabled","_disabled","newValue","coerceBooleanProperty","_disabledChange","_popupRef","dispose","_popupComponentRef","oldValue","Error","input","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","setTimeout","open","direction","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","ComponentPortal","_createPopup","attach","instance","onStable","asObservable","pipe","take","updatePosition","overlayConfig","OverlayConfig","hasBackdrop","backdropClass","create","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","altKey","UP_ARROW","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","MatDateSelectionModel","useClass","MatSingleDateSelectionModel","MatDialog","Directionality","DOCUMENT","calendarHeaderComponent","opened","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","EventEmitter","dateInput","_valueChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_isSelectionInitialized","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_selectionModel","_datepicker","_registerInput","ngOnDestroy","_formatValue","oldDate","sameDate","setSelection","isValid","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","isAltDownArrow","DOWN_ARROW","readOnly","preventDefault","_onInput","parse","current","_onChange","_onBlur","format","display","obj","isDateInstance","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","ngOnChanges","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","(focus)","String","Attribute","disableRipple","_customIcon","ContentChild","_button","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","MatCalendarBody","declarations","entryComponents","__extends","d","b","__","constructor","extendStatics","provider","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","providedIn","MatCalendarCell","range","displayValue","ariaLabel","enabled","cssClasses","_cdr","numCols","activeCell","cellAspectRatio","selectedValueChange","_updateToday","granularity","_getFirstCellGranularity","getDate","getMonth","getYear","_getFirstCellRange","start","year","month","day","createDate","_cellClicked","cell","columnChanges","_a","rows","_firstRowOffset","length","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_isSelected","item","overlaps","_isToday","_today","end","_focusActiveCell","runOutsideAngular","querySelector","role","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","extractDate","dateSubscription","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_minDate","_maxDate","_matCalendarBody","_dateSelected","_selectedDate","selectedYear","selectedMonth","selectedDate","isComplete","_handleCalendarBodyKeydown","isRtl","_isRtl","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","HOME","END","getNumDaysInMonth","PAGE_UP","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","SPACE","_getDateInCurrentMonth","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","_selected","extractYear","Math","floor","_todayYear","activeYear","activeOffset","_years","row","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedYear","extractCurrentMonth","_monthSelected","normalizedDate","_selectedMonth","_getMonthInCurrentYear","selected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","changeDetectorRef","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2"],"mappings":"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"}