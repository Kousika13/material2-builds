{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as ConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.onPositionChange.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n"],"names":["host","class","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","undefined","decorators","Optional","Inject","args","MAT_DATE_FORMATS","ChangeDetectorRef","MatCalendar","propDecorators","selected","Input","minDate","maxDate","dateFilter","selectedChange","Output","yearSelected","monthSelected","_userSelection","monthView","ViewChild","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_elementRef","this","_MatDatepickerContentMixinBase","mixinColor","MatDatepickerContent","elementRef","_changeDetectorRef","_ngZone","_this","_super","call","tslib_1.__extends","prototype","ngOnInit","datepicker","_popupRef","_positionChange","positionStrategy","getConfig","onPositionChange","subscribe","change","isAbove","connectionPair","overlayY","_isAbove","run","markForCheck","ngAfterContentInit","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","nativeElement","querySelector","focus","ngOnDestroy","unsubscribe","Component","selector","template","styles","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","animations","inputs","NgZone","_overlay","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","complete","dispose","_popupComponentRef","_selected","date","sameDate","oldValue","selectedChanged","emit","_datepickerInput","Error","input","_valueChange","value","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","viewContainerRef","panelClass","afterClosed","componentInstance","_setColor","_createPopup","attach","instance","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withFallbackPosition","originX","originY","overlayX","color","ctorParameters","MatDialog","DateAdapter","Directionality","DOCUMENT","startAt","startView","disabled","opened","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","element","blur","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","_getThemePalette","obj","isDateInstance","Directive","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","ContentChild","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","exports","MatCalendarBody","declarations","MatDatepickerIntl","entryComponents","MatDatepickerModule","__extends","d","b","__","constructor","extendStatics","provider","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","isRtl","_isRtl","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","d1","d2","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","changeDetectorRef","_intlChanges","_startAt","_clampedActiveDate","_currentView","monthYearLabel","multi-year","firstChange","view","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2"],"mappings":"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"}