{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-d5a7cce');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private _closeKeyEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '*'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '*'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed: EventEmitter<void | 'click' | 'keydown'>\n      = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // TODO(crisbeto): make the origin required when doing breaking changes.\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * <mat-expansion-panel>\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header>\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange: EventEmitter<MatChipSelectionChange>\n      = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","transform","animate","transition","style","MatTabBodyPortal","_componentFactoryResolver","_viewContainerRef","_host","_this","_super","call","this","tslib_1.__extends","prototype","ngOnInit","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","ngOnDestroy","closed","unsubscribe","type","Directive","args","selector","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","Object","defineProperty","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","host","class","propDecorators","Output","Input","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","isActive","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","exportAs","inputs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","declarations","MatInkBar","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","snackBarRef","instance","contentRef","_breakpointObserver","observe","Breakpoints","Handset","overlayRef","detachments","take","state","matches","overlayElement","MatSnackBar","_createOverlay","config","overlayConfig","OverlayConfig","direction","positionStrategy","_overlay","global","isRtl","isLeft","horizontalPosition","isRight","left","right","centerHorizontally","verticalPosition","top","bottom","create","_createInjector","userInjector","viewContainerRef","injector","injectionTokens","WeakMap","set","MatSnackBarRef","MAT_SNACK_BAR_DATA","data","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","MatSnackBarContainer","SimpleSnackBar","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","ngOnChanges","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","trigger","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","Number","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","templateRef","CdkPortal","MatTabBase","_MatTabMixinBase","textLabel","_contentPortal","hasOwnProperty","TemplatePortal","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","applyCssTransform","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","action","[@contentFade]","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_live","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","containerPortal","ComponentPortal","containerRef","container","MatRadioButton","radioGroup","_changeDetector","_radioDispatcher","_uniqueId","nextUniqueId","_checked","_rippleConfig","centered","radius","_removeUniqueSelectionListener","listen","newCheckedState","notify","_labelPosition","_disabled","_required","focusVia","_markForCheck","focusOrigin","_onInputFocusChange","MatRadioChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_touch","_focusRipple","fadeOut","launch","tslib_1.__assign","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","align","_MatRadioButtonMixinBase","MatRadioModule","MatRadioGroup","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChildren","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","overlayX","overlayY","isLtr","getMatTooltipInvalidPositionError","_invertPosition","main","fallback","MatTooltip","_updateTooltipMessage","_tooltipInstance","updatePosition","_setTooltipClass","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","isVisible","_setTransformOrigin","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","newValue","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroupBase","_MatRadioGroupMixinBase","_name","_isInitialized","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_radios","radio","isAlreadySelected","event_1","descendants","MatRadioButtonBase","MatMenuTrigger","closeMenu","menu","_destroyMenu","menuOpen","_resetMenu","_closeSubscription","MatMenu","_resetAnimation","_initMenu","parentMenu","triggersSubmenu","_parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedByMouse","setElevation","depth","_menuOpen","menuOpened","menuClosed","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_portal","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","_positionSubscription","onPositionChange","posX","connectionPair","posY","setPositionClasses","xPosition","originX","originFallbackX","_b","yPosition","overlayFallbackY","_c","originY","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","connectedTo","withDirection","withOffsetY","withFallbackPosition","_cleanUpSubscriptions","_hoverSubscription","_menuClosingActions","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","toggleMenu","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_disposeTooltip","removeDescription","_isTooltipVisible","describe","_tooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","_getOrigin","overlay","_getOverlayPosition","strategy","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","scrollableViewProperties","isOverlayClipped","isDirectionLtr","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_startAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","reason","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_dateFormats","createMissingDateImplError","_localeSubscription","_dateAdapter","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_dateFilter","_validatorOnChange","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","Validators","compose","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_emitSelectionChangeEvent","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}