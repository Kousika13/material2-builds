{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.6-3723191');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\n      if (this.autocomplete) {\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\n            connectionPair.originY === 'top';\n      }\n    });\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    } else if (_platform.IOS && (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA')) {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  InjectionToken\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  return typeof window !== 'undefined' ? window.location : {pathname: ''};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use\n    // `Location` from `@angular/common` since we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = Math.round(coerceNumberProperty(value)); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element.nativeElement, 'program'));\n\n      _focusMonitor.monitor(_element);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => this._hasFocus = false);\n\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","viewContainer","type","Directive","args","selector","ViewContainerRef","MatTreeNodeOutlet","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabLabel","_CdkPortal","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","_vertical","MatSlider","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_onInputFocusChange","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRipple","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_bufferValue","path","pathname","_rectangleFillValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","MatChipList","_clearSelection","skip","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","correspondingChip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}