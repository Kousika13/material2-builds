{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.6-2364b7c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\n      if (this.autocomplete) {\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\n            connectionPair.originY === 'top';\n      }\n    });\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends _CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance !== 'outline') {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["exports","MatToolbar","MatToolbarRow","MatCommonModule","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","type","Directive","args","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","NgModule","imports","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabLabel","_CdkPortal","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","_vertical","MatSlider","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_onInputFocusChange","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRipple","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}