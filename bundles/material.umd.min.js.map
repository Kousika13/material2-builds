{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.0-948e563');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase: CanDisableCtor & typeof MatButtonToggleGroupBase =\n    mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","positions","_inkBarPositioner","element","inkBar","nativeElement","style","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatInkBar","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_setStyles","_value","_percent","_calculatePercentage","MatSlider","_vertical","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","toString","split","pop","parseFloat","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","selectedOptionOffset","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatAccordion","_handleHeaderFocus","header","MAT_ACCORDION","_headers","MatExpansionPanelHeader","hideToggle","displayMode","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}