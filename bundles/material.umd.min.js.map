{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {take} from 'rxjs/operators/take';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.4-f91334a');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options');\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar, MAT_SNACK_BAR_DEFAULT_OPTIONS} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [\n    MatSnackBar,\n    LIVE_ANNOUNCER_PROVIDER,\n    {\n      provide: MAT_SNACK_BAR_DEFAULT_OPTIONS,\n      useFactory: MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY\n    },\n  ]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Whether the drawer container should have a backdrop while one of the sidenavs is open. */\n  @Input()\n  get hasBackdrop() {\n    if (this._hasBackdrop == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(value: any) {\n    this._hasBackdrop = value == null ? null : coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  constructor(elementRef: ElementRef, private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        } else {\n          this._keyManager.updateActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase\n    implements OnInit, OnDestroy, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ElementRef, Inject, Optional, NgZone, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ThemePalette} from '@angular/material/core';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    this._animationState = 'visible';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    this._animationState = 'hidden';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input() appearance: MatFormFieldAppearance = 'legacy';\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["selectedIndex","type","Input","headerPosition","backgroundColor","selectedIndexChange","Output","focusChange","animationDone","selectedTabChange","selectChange","MatTabGroup","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","_this","_super","call","this","tslib_1.__extends","prototype","focus","nativeElement","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","Directive","args","selector","inputs","host","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_elementRef","_changeDetectorRef","_viewportRuler","_dir","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","Object","defineProperty","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","emit","focusIndex","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","dir","_getLayoutDirection","scrollLeft","scrollWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","PlatformModule","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","provide","useExisting","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepHeader","iconOverrides","selected","active","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","show","_setStyles","hide","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","vertical","input","_sliderWrapper","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","_setCssClasses","Array","isArray","cssClass","panelClass","extraClasses","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","useFactory","MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","[style.margin-left.px]","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","_drawers","ContentChild","MatDrawerContainer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","MatSidenavModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatRadioModule","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","align","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","hasBackdrop","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","withPositions","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_classList","newElevation","_previousElevation","MatMenu","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","customElevation","c","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","MatIconRegistry","_extractIconWithNameFromAnySet","iconName","iconSetConfigs","svgElement","foundIcon","_extractSvgIconFromSet","_loadSvgIconFromConfig","_fetchUrl","url","svgText","_createSvgElementForSingleIcon","_loadSvgIconSetFromConfig","_svgElementFromString","responseText","svg","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","sameDate","oldDate","_valueChange","MatDatepickerInput","_getValidDateOrNull","deserialize","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","iconSetFetchRequests","iconSetConfig","catchError","forkJoin","selectedChange","yearSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","getYear","_init","_selectedYear","_minDate","_maxDate","_focusActiveCell","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","createDate","month","getMonth","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarYears","yearsPerPage","_getActiveCell","_matCalendarBody","yearName","getYearName","MatCalendarCell","_shouldEnableYear","dateFilter","firstOfYear","addCalendarDays","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","addCalendarMonths","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_monitoredElements","observableEmpty","info","subject","animationName","isAutofilled","unlisten","_info","MatAutofill","_autofillMonitor","matAutofill","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","updateActiveItem","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_componentDestroyed","MatAutocompleteTrigger","optionSelections","autocomplete","_overlayAttached","_closeKeyEventStream","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","displayWith","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","appearance","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}