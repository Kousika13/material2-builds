{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.2.1-9d2cb6c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    if (this._ngZone) {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["providers","provide","CdkTreeNodePadding","useExisting","MatTreeNodePadding","level","type","Input","args","indent","MatTree","_super","tslib_1.__extends","Component","selector","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","CdkTree","propDecorators","MatTreeNodeToggle","_this","apply","this","arguments","recursive","Directive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNode","MatTreeNodeOutlet","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","prototype","_flattenNode","node","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","MatTabBodyPortal","CdkPortalOutlet","_elementRef","_dir","changeDetectorRef","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","ngOnDestroy","unsubscribe","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","inputs","[class.mat-tab-disabled]","[attr.aria-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","v","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_a","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_left","mode","_width","_right","opened","_contentMargins","_contentMarginChanges","MatDrawerContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","fromEvent","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","MatTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","_manualListeners","listener","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","_updatePosition","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_handleTouchStart","passiveEventListenerOptions","_cleanUpSubscriptions","_closingActionsSubscription","MatMenuTrigger","_menuOpen","triggersSubmenu","_menuItemInstance","_parentMenu","toggleMenu","closeMenu","openMenu","_checkMenu","_setPosition","hasBackdrop","menu","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","_destroyMenu","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","_handleHover","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","hammerLoader","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","[attr.aria-selected]","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","normalizePassiveListenerOptions","passive","_menuCloseSubscription","_menu","reason","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","MatExpansionModule","CdkAccordionModule","MatAccordion","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","CdkAccordion","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","align","[class.mat-card-actions-align-end]","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatLabel","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}