{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n\n      // In case the user select the option with their mouse, we\n      // want to restore focus back to the trigger, in order to\n      // prevent the select keyboard controls from clashing with\n      // the ones from `mat-option`.\n      this.focus();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._focusIndex;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.2.1-3681ddf');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // If we've got a step with a decimal, we may end up with something like 33.300000000000004.\n      // Truncate the value to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));\n      }\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth = this._defaults ? this._defaults.strokeWidth : undefined;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = this._defaults && this._defaults.diameter ?\n      this._defaults.diameter : BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 _animationMode and _defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private _defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withTransformOriginOn('.mat-menu-panel')\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","MatTabHeader","prototype","_focusFirstTab","i","this","_labelWrappers","length","_isValidIndex","focusIndex","_focusLastTab","_getLayoutDirection","_dir","value","_updateTabScrollPosition","scrollDistance","translateX","_tabList","nativeElement","style","transform","Object","defineProperty","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_checkScrollingControls","_scrollHeader","scrollDir","viewLength","_tabListContainer","offsetWidth","_scrollToLabel","labelIndex","selectedLabel","toArray","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","_checkPaginationEnabled","isEnabled","scrollWidth","_elementRef","_showPaginationControls","_changeDetectorRef","markForCheck","_disableScrollBefore","_disableScrollAfter","_alignInkBarToSelectedTab","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","indexFocused","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","emit","Promise","resolve","then","forEach","tab","index","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","ngOnDestroy","unsubscribe","realignInkBar","_tabHeader","_focusChanged","event","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","disabled","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","dirChange","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_selectedIndexChanged","_realignInkBar","_tabLabelCount","_updatePagination","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","END","ENTER","SPACE","resize","realign","_onContentChanges","_setTabFocus","containerEl","scrollLeft","_moveFocus","offset","tabs","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","parseFloat","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","defaults","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","MatOptionModule","MatFormFieldModule","MatSelect","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_defaults","_strokeWidth","strokeWidth","_fallbackAnimation","_diameter","diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_isAnimating","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","distinctUntilChanged","panelOpen","overlayDir","offsetX","_initKeyManager","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","svgElement","_svgElementFromString","svgText","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","_disabledChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","activeDate","addCalendarYears","_activeDate","yearsPerPage","_yearSelected","getYear","_focusActiveCell","_getActiveCell","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","_viewportSubscription","_componentDestroyed","_destroyPanel","_closeKeyEventStream","_overlayAttached","autocomplete","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","optionSelections","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","_autocompleteDisabled","[attr.aria-autocomplete]","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","stopImmediatePropagation","_emitSelectionChangeEvent","setActiveStyles","_active","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}