{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeDef as any)['ctorParameters'] = () => (CdkTreeNodeDef as any)['ctorParameters'];\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodePadding as any)['ctorParameters'] = () =>\n    (CdkTreeNodePadding as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTree as any)['ctorParameters'] = () => (CdkTree as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeToggle as any)['ctorParameters'] = () => (CdkTreeNodeToggle as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.1-bbeb5ef');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatCellDef as any)['ctorParameters'] = () => (CdkCellDef as any)['ctorParameters'];\n(MatHeaderCellDef as any)['ctorParameters'] = () => (CdkHeaderCellDef as any)['ctorParameters'];\n(MatFooterCellDef as any)['ctorParameters'] = () => (MatFooterCellDef as any)['ctorParameters'];\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatHeaderRowDef as any)['ctorParameters'] = () => (CdkHeaderRowDef as any)['ctorParameters'];\n(MatFooterRowDef as any)['ctorParameters'] = () => (CdkFooterRowDef as any)['ctorParameters'];\n(MatRowDef as any)['ctorParameters'] = () => (CdkRowDef as any)['ctorParameters'];\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTabLabel as any)['ctorParameters'] = () => (CdkPortal as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepLabel as any)['ctorParameters'] = () => (CdkStepLabel as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepper as any)['ctorParameters'] = () => (CdkStepper as any)['ctorParameters'];\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepperNext as any)['ctorParameters'] = () => (CdkStepperNext as any)['ctorParameters'];\n(MatStepperPrevious as any)['ctorParameters'] = () =>\n    (CdkStepperPrevious as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTable as any)['ctorParameters'] = () => (CdkTable as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, because Angular will only instantiate\n    // this provider once, but we want the current location on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(touchstart)': '_openedBy = \"touch\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.asObservable().subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTextareaAutosize as any)['ctorParameters'] = () =>\n    (CdkTextareaAutosize as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_backgroundColor","value","nativeElement","_elementRef","classList","remove","backgroundColor","add","MatTabNav","prototype","updateActiveLink","element","_activeLinkChanged","_changeDetectorRef","markForCheck","ngAfterContentInit","_this","_ngZone","runOutsideAngular","dirChange","_dir","change","observableOf","merge","_viewportRuler","pipe","takeUntil","_onDestroy","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_super","call","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatCell","CdkColumnDef","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","arrowPosition","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","MatSlider","_thumbLabel","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","itemHeight","_getItemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","_getOptionIndex","_selectionModel","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(touchstart)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","result","current","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","MatCheckbox","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","HAMMER_LOADER","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","normalizePassiveListenerOptions","passive","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}