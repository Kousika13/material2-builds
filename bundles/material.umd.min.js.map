{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.3-8e2ff1f');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n          // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n          // adding a tab within the `selectedIndexChange` event.\n          this._indexToSelect = this._selectedIndex = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero.\n        left: left || null,\n        right: right || null,\n      };\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      const child = layoutElement.childNodes[i];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @deletion-target 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["args","selector","providers","provide","CdkTreeNodePadding","useExisting","MatTreeNodePadding","level","type","Input","indent","tslib_1.__extends","MatTree","_super","Component","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","CdkTree","_this","recursive","MatTreeNodeToggle","Directive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNode","MatTreeNodeOutlet","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","this","prototype","_flattenNode","node","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_labelChange","complete","MatTab","ngOnInit","_contentPortal","TemplatePortal","_explicitContent","_implicitContent","_viewContainerRef","inputs","propDecorators","ViewChild","TemplateRef","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ngOnDestroy","unsubscribe","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_disableChange","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","changeDetectorRef","MatSortHeader","_disableClear","id","_cdkColumnDef","name","_updateArrowDirection","_setAnimationTransitionState","_isSorted","_arrowDirection","_sort","register","deregister","_rerenderSubscription","_setIndicatorHintVisible","visible","_isDisabled","_showIndicatorHint","viewState","_viewState","_disableViewStateAnimation","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","CdkColumnDef","disableClear","MAT_SORT_HEADER_INTL_PROVIDER","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","Injectable","providedIn","MatStepperIntl","MatStepHeader","_intl","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","ngOnChanges","hasOwnProperty","axis","vertical","_invertMouseCoords","_thumbGap","percent","MatSlider","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_isMinValue","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","sortButtonLabel","MatSortHeaderIntl","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","getSortHeaderNotContainedWithinSortError","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","MatSelect","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","insertBefore","_outlet","outletElement","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","FixedTileStyler","reset","list","_setListStyle","_tiles","tile","_setStyle","TileStyler","RatioTileStyler","_parseRatio","setRowStyles","rowIndex","percentWidth","gutterWidth","percentHeightPerTile","rowHeightRatio","baseTileHeight","getBaseTileSize","getTilePosition","calc","getTileSize","rowspan","getComputedHeight","getTileSpan","getGutterSpan","ratioParts","FitTileStyler","_rowspan","gutterHeightPerTile","_rows","MatGridList","_gutter","_cols","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","cols","rowHeight","_tileStyler","tracker","TileCoordinator","init","gutterSize","setStyle","row","col","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_inputSubscription","_disabledChange","_popupRef","_popupComponentRef","date","_dateAdapter","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDatepicker","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","numColumns","tiles","columnIndex","fill","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","_gutterSize","normalizeUnits","sizePercent","gutterFraction","baseSize","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","baseTileWidth","side","tileHeight","fixedRowHeight","_init","_dateSelected","_selectedDate","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_handleCalendarBodyKeydown","oldActiveDate","_activeDate","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","activeDateChange","_focusActiveCell","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","minDate","maxDate","_hasSameMonthAndYear","d1","d2","validDate","clampDate","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","MatCardHeader","MatCardTitleGroup","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","optionSelected","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","panelWidth","_getHostWidth","autoActiveFirstOption","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}